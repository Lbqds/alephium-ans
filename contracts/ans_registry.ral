import "record.ral"
import "constants.ral"

Contract ANSRegistry(mut admin: Address, recordTemplateId: ByteVec) extends Constants() {
  pub fn updateAdmin(newAdmin: Address) -> () {
    assert!(callerAddress!() == admin, ErrorCodes.InvalidCaller)
    admin = newAdmin
  }

  @using(preapprovedAssets = true)
  pub fn newNode(node: ByteVec, ownerContractId: ByteVec) -> () {
    assert!(callerAddress!() == admin, ErrorCodes.InvalidCaller)
    let ownerAddress = contractIdToAddress!(ownerContractId)
    let maxTTL = 1 << 255
    let encodedState = encodeToByteVec!(ownerContractId, ownerAddress, maxTTL, #, admin)
    copyCreateSubContractWithToken!{admin -> 1 alph}(node, recordTemplateId, encodedState, 1)
  }

  @using(preapprovedAssets = true)
  pub fn setSubNodeRecord(
    node: ByteVec,
    label: ByteVec,
    owner: Address,
    ttl: U256,
    resolver: ByteVec,
    payer: Address
  ) -> () {
    let record = Record(subContractId!(node))
    assert!(callerAddress!() == record.getOwner(), ErrorCodes.InvalidCaller)
    assert!(ttl <= record.getTTL(), ErrorCodes.InvalidArgs)
    assert!(isAssetAddress!(payer), ErrorCodes.ExpectAssetAddress)
    let encodedState = encodeToByteVec!(record.getRegistrar(), owner, ttl, resolver, payer)
    let subNode = keccak256!(node ++ label)
    copyCreateSubContractWithToken!{payer -> 1 alph}(subNode, recordTemplateId, encodedState, 1)
  }
}
