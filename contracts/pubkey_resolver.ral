Abstract Contract PubkeyResolver(
  ansRegistryId: ByteVec,
  pubkeyInfoTemplateId: ByteVec
) extends ResolverBase(ansRegistryId), Constants() {
  @using(preapprovedAssets = true)
  fn createPubkeyInfo(node: ByteVec, pubkey: ByteVec, payer: Address) -> () {
    checkCaller!(callerAddress!() == getOwner(node), ErrorCodes.InvalidCaller)
    copyCreateSubContract!{payer -> ALPH: 1 alph}(
      PathPrefix.PubkeyInfo ++ node,
      pubkeyInfoTemplateId,
      PubkeyInfo.encodeImmFields!(selfContractId!()),
      PubkeyInfo.encodeMutFields!(pubkey)
    )
  }

  @using(preapprovedAssets = true)
  pub fn setPubkey(node: ByteVec, pubkey: ByteVec) -> () {
    let caller = callerAddress!()
    checkCaller!(caller == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.PubkeyInfo ++ node)
    if (contractExists!(contractId)) {
      let pubkeyInfo = PubkeyInfo(contractId)
      pubkeyInfo.setPubkey(pubkey)
    } else {
      createPubkeyInfo{caller -> ALPH: 1 alph}(node, pubkey, caller)
    }
  }

  pub fn getPubkey(node: ByteVec) -> ByteVec {
    let pubkeyInfo = PubkeyInfo(subContractId!(PathPrefix.PubkeyInfo ++ node))
    return pubkeyInfo.getPubkey()
  }

  pub fn removePubkeyInfo(node: ByteVec, refundAddress: Address) -> () {
    checkCaller!(callerAddress!() == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.PubkeyInfo ++ node)
    if (contractExists!(contractId)) {
      let pubkeyInfo = PubkeyInfo(contractId)
      pubkeyInfo.destroy(refundAddress)
    }
  }
}
