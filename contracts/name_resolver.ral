import "resolver_base.ral"
import "name_info.ral"
import "constants.ral"

Abstract Contract NameResolver(
  ansRegistryId: ByteVec,
  nameInfoTemplateId: ByteVec
) extends ResolverBase(ansRegistryId), Constants() {
  @using(preapprovedAssets = true)
  fn createNameInfo(node: ByteVec, name: ByteVec, payer: Address) -> () {
    assert!(callerAddress!() == getOwner(node), ErrorCodes.InvalidCaller)
    let encodedState = encodeToByteVec!(selfContractId!(), name)
    copyCreateSubContract!{payer -> 1 alph}(PathPrefix.NameInfo ++ node, nameInfoTemplateId, encodedState)
  }

  @using(preapprovedAssets = true)
  pub fn setName(node: ByteVec, name: ByteVec) -> () {
    let caller = callerAddress!()
    assert!(caller == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.NameInfo ++ node)
    if (contractExists!(contractId)) {
      let nameInfo = NameInfo(contractId)
      nameInfo.setName(name)
    } else {
      createNameInfo{caller -> 1 alph}(node, name, caller)
    }
  }

  pub fn getName(node: ByteVec) -> ByteVec {
    let nameInfo = NameInfo(subContractId!(PathPrefix.NameInfo ++ node))
    return nameInfo.getName()
  }

  pub fn removeNameInfo(node: ByteVec, refundAddress: Address) -> () {
    assert!(callerAddress!() == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.NameInfo ++ node)
    if (contractExists!(contractId)) {
      let nameInfo = NameInfo(contractId)
      nameInfo.destroy(refundAddress)
    }
  }
}
