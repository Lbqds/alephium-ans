import "resolver_base.ral"
import "address_info.ral"
import "constants.ral"

Abstract Contract AddressResolver(
  ansRegistryId: ByteVec,
  addressInfoTemplateId: ByteVec
) extends ResolverBase(ansRegistryId), Constants() {
  const AlphId = 1234
  const EthId = 60

  @using(preapprovedAssets = true)
  fn createAddressInfo(node: ByteVec, payload: ByteVec, payer: Address) -> () {
    let owner = getOwner(node)
    assert!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
    let encodedState = encodeToByteVec!(selfContractId!(), payload)
    copyCreateSubContract!{payer -> 1 alph}(PathPrefix.AddressInfo ++ node, addressInfoTemplateId, encodedState)
  }

  @using(preapprovedAssets = true)
  pub fn setAlphAddress(node: ByteVec, address: Address) -> () {
    setAddress{callerAddress!() -> 1 alph}(node, AlphId, toByteVec!(address))
  }

  @using(preapprovedAssets = true)
  pub fn setEthAddress(node: ByteVec, address: ByteVec) -> () {
    setAddress{callerAddress!() -> 1 alph}(node, EthId, address)
  }

  @using(preapprovedAssets = true)
  pub fn setAddress(node: ByteVec, chainId: U256, address: ByteVec) -> () {
    let caller = callerAddress!()
    assert!(caller == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.AddressInfo ++ node)
    if (contractExists!(contractId)) {
      let addressInfo = AddressInfo(contractId)
      addressInfo.setAddress(chainId, address)
    } else {
      let payload =u256To2Byte!(chainId) ++ u256To1Byte!(size!(address)) ++ address
      createAddressInfo{caller -> 1 alph}(node, payload, caller)
    }
  }

  pub fn getAlphAddress(node: ByteVec) -> Address {
    return byteVecToAddress!(getAddress(node, AlphId))
  }

  pub fn getEthAddress(node: ByteVec) -> ByteVec {
    return getAddress(node, EthId)
  }

  pub fn getAddress(node: ByteVec, chainId: U256) -> ByteVec {
    let addressInfo = AddressInfo(subContractId!(PathPrefix.AddressInfo ++ node))
    return addressInfo.getAddress(chainId)
  }

  pub fn removeAddressInfo(node: ByteVec, refundAddress: Address) -> () {
    assert!(callerAddress!() == getOwner(node), ErrorCodes.InvalidCaller)
    let contractId = subContractId!(PathPrefix.AddressInfo ++ node)
    if (contractExists!(contractId)) {
      let addressInfo = AddressInfo(contractId)
      addressInfo.destroy(refundAddress)
    }
  }
}