Abstract Contract RecordBase(
  registrar: ByteVec,
  mut owner: Address,
  mut resolver: Resolver,
  mut ttl: U256,
  refundAddress: Address
) extends Constants() implements Record {
  pub fn getOwner() -> Address {
    return owner
  }

  @using(updateFields = true)
  pub fn setOwner(newOwner: Address) -> () {
    checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
    owner = newOwner
  }

  pub fn getResolver() -> Resolver {
    return resolver
  }

  @using(updateFields = true)
  pub fn setResolver(newResolver: Resolver) -> () {
    checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
    resolver = newResolver
  }

  pub fn getRefundAddress() -> Address {
    return refundAddress
  }

  pub fn getTTL() -> U256 {
    return ttl
  }

  @using(updateFields = true)
  pub fn setTTL(newTTL: U256) -> () {
    checkCaller!(callerContractId!() == registrar, ErrorCodes.InvalidCaller)
    ttl = newTTL
  }

  @using(assetsInContract = true)
  pub fn destroy(node: ByteVec) -> () {
    checkCaller!(callerContractId!() == registrar, ErrorCodes.InvalidCaller)
    if (contractId!(resolver) != #) {
      resolver.removeNode(node, refundAddress)
    }
    destroySelf!(refundAddress)
  }
}