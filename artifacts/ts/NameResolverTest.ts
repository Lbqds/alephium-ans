/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NameResolverTestContractJson } from "../tests/name_resolver_test.ral.json";

// Custom types for the contract
export namespace NameResolverTestTypes {
  export type Fields = {
    ansRegistryId: HexString;
    nameInfoTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getName: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
    getOwner: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  NameResolverTestInstance,
  NameResolverTestTypes.Fields
> {
  at(address: string): NameResolverTestInstance {
    return new NameResolverTestInstance(address);
  }

  tests = {
    createNameInfo: async (
      params: TestContractParams<
        NameResolverTestTypes.Fields,
        { node: HexString; name: HexString; payer: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createNameInfo", params);
    },
    setName: async (
      params: TestContractParams<
        NameResolverTestTypes.Fields,
        { node: HexString; name: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setName", params);
    },
    getName: async (
      params: TestContractParams<
        NameResolverTestTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    removeNameInfo: async (
      params: TestContractParams<
        NameResolverTestTypes.Fields,
        { node: HexString; refundAddress: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeNameInfo", params);
    },
    getOwner: async (
      params: TestContractParams<
        NameResolverTestTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getOwner", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NameResolverTest = new Factory(
  Contract.fromJson(
    NameResolverTestContractJson,
    "",
    "93e99503138928b4dfea841b6d0bc42c6169e296be8d22d07a7f980900325a92"
  )
);

// Use this class to interact with the blockchain
export class NameResolverTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NameResolverTestTypes.State> {
    return fetchContractState(NameResolverTest, this);
  }

  methods = {
    getName: async (
      params: NameResolverTestTypes.CallMethodParams<"getName">
    ): Promise<NameResolverTestTypes.CallMethodResult<"getName">> => {
      return callMethod(NameResolverTest, this, "getName", params);
    },
    getOwner: async (
      params: NameResolverTestTypes.CallMethodParams<"getOwner">
    ): Promise<NameResolverTestTypes.CallMethodResult<"getOwner">> => {
      return callMethod(NameResolverTest, this, "getOwner", params);
    },
  };

  async multicall<Calls extends NameResolverTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NameResolverTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NameResolverTest,
      this,
      calls
    )) as NameResolverTestTypes.MultiCallResults<Calls>;
  }
}
