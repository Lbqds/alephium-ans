/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AccountResolverContractJson } from "../resolvers/AccountResolver.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AccountResolverTypes {
  export type Fields = {
    registrar: HexString;
    accountInfoTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export type NewAccountInfoCreatedEvent = ContractEvent<{
    node: HexString;
    pubkey: HexString;
    addresses: HexString;
  }>;
  export type AddressUpdatedEvent = ContractEvent<{
    node: HexString;
    chainId: bigint;
    newAddress: HexString;
  }>;
  export type PubkeyUpdatedEvent = ContractEvent<{
    node: HexString;
    newPubkey: HexString;
  }>;
  export type AccountInfoRemovedEvent = ContractEvent<{ node: HexString }>;

  export interface CallMethodTable {
    getAddress: {
      params: CallContractParams<{ node: HexString; chainId: bigint }>;
      result: CallContractResult<HexString>;
    };
    getPubkey: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  AccountResolverInstance,
  AccountResolverTypes.Fields
> {
  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
      PrimaryRecordNotExists: BigInt(5),
    },
  };

  at(address: string): AccountResolverInstance {
    return new AccountResolverInstance(address);
  }

  tests = {
    removeNode: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeNode", params);
    },
    newAccountInfo: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        {
          node: HexString;
          payer: Address;
          pubkey: HexString;
          addresses: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newAccountInfo", params);
    },
    setAddress: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        { node: HexString; chainId: bigint; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAddress", params);
    },
    getAddress: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        { node: HexString; chainId: bigint }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getAddress", params);
    },
    setPubkey: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        { node: HexString; pubkey: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setPubkey", params);
    },
    getPubkey: async (
      params: TestContractParams<
        AccountResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPubkey", params);
    },
  };
}

// Use this object to test and deploy the contract
export const AccountResolver = new Factory(
  Contract.fromJson(
    AccountResolverContractJson,
    "",
    "afb858c254bb8a3ad6ae0f4715baf86091c9b235ceea5c8afe8c60e1af6130d0"
  )
);

// Use this class to interact with the blockchain
export class AccountResolverInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AccountResolverTypes.State> {
    return fetchContractState(AccountResolver, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewAccountInfoCreatedEvent(
    options: SubscribeOptions<AccountResolverTypes.NewAccountInfoCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AccountResolver.contract,
      this,
      options,
      "NewAccountInfoCreated",
      fromCount
    );
  }

  subscribeAddressUpdatedEvent(
    options: SubscribeOptions<AccountResolverTypes.AddressUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AccountResolver.contract,
      this,
      options,
      "AddressUpdated",
      fromCount
    );
  }

  subscribePubkeyUpdatedEvent(
    options: SubscribeOptions<AccountResolverTypes.PubkeyUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AccountResolver.contract,
      this,
      options,
      "PubkeyUpdated",
      fromCount
    );
  }

  subscribeAccountInfoRemovedEvent(
    options: SubscribeOptions<AccountResolverTypes.AccountInfoRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AccountResolver.contract,
      this,
      options,
      "AccountInfoRemoved",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | AccountResolverTypes.NewAccountInfoCreatedEvent
      | AccountResolverTypes.AddressUpdatedEvent
      | AccountResolverTypes.PubkeyUpdatedEvent
      | AccountResolverTypes.AccountInfoRemovedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      AccountResolver.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getAddress: async (
      params: AccountResolverTypes.CallMethodParams<"getAddress">
    ): Promise<AccountResolverTypes.CallMethodResult<"getAddress">> => {
      return callMethod(
        AccountResolver,
        this,
        "getAddress",
        params,
        getContractByCodeHash
      );
    },
    getPubkey: async (
      params: AccountResolverTypes.CallMethodParams<"getPubkey">
    ): Promise<AccountResolverTypes.CallMethodResult<"getPubkey">> => {
      return callMethod(
        AccountResolver,
        this,
        "getPubkey",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends AccountResolverTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AccountResolverTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      AccountResolver,
      this,
      calls,
      getContractByCodeHash
    )) as AccountResolverTypes.MultiCallResults<Calls>;
  }
}
