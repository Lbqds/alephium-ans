/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as ANSRegistryContractJson } from "../ans_registry.ral.json";

// Custom types for the contract
export namespace ANSRegistryTypes {
  export type Fields = {
    admin: Address;
    recordTemplateId: HexString;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  ANSRegistryInstance,
  ANSRegistryTypes.Fields
> {
  at(address: string): ANSRegistryInstance {
    return new ANSRegistryInstance(address);
  }

  tests = {
    updateAdmin: async (
      params: TestContractParams<ANSRegistryTypes.Fields, { newAdmin: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateAdmin", params);
    },
    newNode: async (
      params: TestContractParams<
        ANSRegistryTypes.Fields,
        { node: HexString; ownerContractId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newNode", params);
    },
    setSubNodeRecord: async (
      params: TestContractParams<
        ANSRegistryTypes.Fields,
        {
          node: HexString;
          label: HexString;
          owner: Address;
          ttl: bigint;
          resolver: HexString;
          payer: Address;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSubNodeRecord", params);
    },
  };
}

// Use this object to test and deploy the contract
export const ANSRegistry = new Factory(
  Contract.fromJson(
    ANSRegistryContractJson,
    "",
    "0508f26fc13862c0d1b1e86ea54daae6bc588c3d32cb9c9ceb6d988e3a5b9ecc"
  )
);

// Use this class to interact with the blockchain
export class ANSRegistryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ANSRegistryTypes.State> {
    return fetchContractState(ANSRegistry, this);
  }
}
