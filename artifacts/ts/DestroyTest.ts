/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DestroyTestContractJson } from "../DestroyTest.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DestroyTestTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<DestroyTestInstance, {}> {
  at(address: string): DestroyTestInstance {
    return new DestroyTestInstance(address);
  }

  tests = {
    destroy: async (
      params: Omit<
        TestContractParams<never, { refundAddress: Address }>,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DestroyTest = new Factory(
  Contract.fromJson(
    DestroyTestContractJson,
    "",
    "2908eaa87e64565572d9fbebe8fd1651cc23bac93c47d9667e4d01d19c051bea"
  )
);

// Use this class to interact with the blockchain
export class DestroyTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DestroyTestTypes.State> {
    return fetchContractState(DestroyTest, this);
  }
}
