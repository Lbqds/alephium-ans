/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as SecondaryRecordContractJson } from "../registrars/SecondaryRecord.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SecondaryRecordTypes {
  export type Fields = {
    registrar: HexString;
    owner: Address;
    resolver: HexString;
    refundAddress: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getResolver: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getRefundAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  SecondaryRecordInstance,
  SecondaryRecordTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SecondaryRecordTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
      PrimaryRecordNotExists: BigInt(5),
    },
  };

  at(address: string): SecondaryRecordInstance {
    return new SecondaryRecordInstance(address);
  }

  tests = {
    getOwner: async (
      params: Omit<
        TestContractParams<SecondaryRecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getResolver: async (
      params: Omit<
        TestContractParams<SecondaryRecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getResolver", params);
    },
    getRefundAddress: async (
      params: Omit<
        TestContractParams<SecondaryRecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getRefundAddress", params);
    },
    setOwner: async (
      params: TestContractParams<
        SecondaryRecordTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    setResolver: async (
      params: TestContractParams<
        SecondaryRecordTypes.Fields,
        { newResolver: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setResolver", params);
    },
    destroy: async (
      params: TestContractParams<
        SecondaryRecordTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SecondaryRecord = new Factory(
  Contract.fromJson(
    SecondaryRecordContractJson,
    "",
    "b60091ea5be04efec3a9eae229bb7450c3ea4105d61bc1bd81127cbbf8c7ca6c"
  )
);

// Use this class to interact with the blockchain
export class SecondaryRecordInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SecondaryRecordTypes.State> {
    return fetchContractState(SecondaryRecord, this);
  }

  methods = {
    getOwner: async (
      params?: SecondaryRecordTypes.CallMethodParams<"getOwner">
    ): Promise<SecondaryRecordTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        SecondaryRecord,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getResolver: async (
      params?: SecondaryRecordTypes.CallMethodParams<"getResolver">
    ): Promise<SecondaryRecordTypes.CallMethodResult<"getResolver">> => {
      return callMethod(
        SecondaryRecord,
        this,
        "getResolver",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRefundAddress: async (
      params?: SecondaryRecordTypes.CallMethodParams<"getRefundAddress">
    ): Promise<SecondaryRecordTypes.CallMethodResult<"getRefundAddress">> => {
      return callMethod(
        SecondaryRecord,
        this,
        "getRefundAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SecondaryRecordTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SecondaryRecordTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      SecondaryRecord,
      this,
      calls,
      getContractByCodeHash
    )) as SecondaryRecordTypes.MultiCallResults<Calls>;
  }
}
