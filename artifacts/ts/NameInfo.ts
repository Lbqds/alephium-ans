/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NameInfoContractJson } from "../name_info.ral.json";

// Custom types for the contract
export namespace NameInfoTypes {
  export type Fields = {
    parentId: HexString;
    name: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<NameInfoInstance, NameInfoTypes.Fields> {
  at(address: string): NameInfoInstance {
    return new NameInfoInstance(address);
  }

  tests = {
    getName: async (
      params: Omit<TestContractParams<NameInfoTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    setName: async (
      params: TestContractParams<NameInfoTypes.Fields, { newName: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setName", params);
    },
    destroy: async (
      params: TestContractParams<
        NameInfoTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NameInfo = new Factory(
  Contract.fromJson(
    NameInfoContractJson,
    "",
    "6da0796e66ff0bf8f85ba2282b7870cf7e16b5da614040dcb3512777c906f3bd"
  )
);

// Use this class to interact with the blockchain
export class NameInfoInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NameInfoTypes.State> {
    return fetchContractState(NameInfo, this);
  }

  methods = {
    getName: async (
      params?: NameInfoTypes.CallMethodParams<"getName">
    ): Promise<NameInfoTypes.CallMethodResult<"getName">> => {
      return callMethod(
        NameInfo,
        this,
        "getName",
        params === undefined ? {} : params
      );
    },
  };

  async multicall<Calls extends NameInfoTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NameInfoTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NameInfo,
      this,
      calls
    )) as NameInfoTypes.MultiCallResults<Calls>;
  }
}
