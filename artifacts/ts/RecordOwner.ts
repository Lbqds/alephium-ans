/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as RecordOwnerContractJson } from "../test/RecordOwner.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RecordOwnerTypes {
  export type Fields = {
    record: HexString;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  RecordOwnerInstance,
  RecordOwnerTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as RecordOwnerTypes.Fields;
  }

  at(address: string): RecordOwnerInstance {
    return new RecordOwnerInstance(address);
  }

  tests = {
    destroyRecord: async (
      params: Omit<
        TestContractParams<RecordOwnerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyRecord", params);
    },
  };
}

// Use this object to test and deploy the contract
export const RecordOwner = new Factory(
  Contract.fromJson(
    RecordOwnerContractJson,
    "",
    "765329ee59e40f9d7108081a0fd0d70e5b44f2bd8eddedee1c4539bd479f36a3"
  )
);

// Use this class to interact with the blockchain
export class RecordOwnerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RecordOwnerTypes.State> {
    return fetchContractState(RecordOwner, this);
  }
}
