/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as PubkeyInfoContractJson } from "../resolvers/PubkeyInfo.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace PubkeyInfoTypes {
  export type Fields = {
    resolver: HexString;
    pubkey: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getPubkey: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  PubkeyInfoInstance,
  PubkeyInfoTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PubkeyInfoTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
      PrimaryRecordNotExists: BigInt(5),
      NameHasExpired: BigInt(6),
      InvalidCredentialTokenId: BigInt(7),
    },
  };

  at(address: string): PubkeyInfoInstance {
    return new PubkeyInfoInstance(address);
  }

  tests = {
    setPubkey: async (
      params: TestContractParams<
        PubkeyInfoTypes.Fields,
        { newPubkey: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setPubkey", params);
    },
    getPubkey: async (
      params: Omit<
        TestContractParams<PubkeyInfoTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPubkey", params);
    },
    destroy: async (
      params: TestContractParams<
        PubkeyInfoTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const PubkeyInfo = new Factory(
  Contract.fromJson(
    PubkeyInfoContractJson,
    "",
    "82e9ddc2555312d69d44883102417388852090d655cbf5ff044c939f6348c81a"
  )
);

// Use this class to interact with the blockchain
export class PubkeyInfoInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PubkeyInfoTypes.State> {
    return fetchContractState(PubkeyInfo, this);
  }

  methods = {
    getPubkey: async (
      params?: PubkeyInfoTypes.CallMethodParams<"getPubkey">
    ): Promise<PubkeyInfoTypes.CallMethodResult<"getPubkey">> => {
      return callMethod(
        PubkeyInfo,
        this,
        "getPubkey",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends PubkeyInfoTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PubkeyInfoTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      PubkeyInfo,
      this,
      calls,
      getContractByCodeHash
    )) as PubkeyInfoTypes.MultiCallResults<Calls>;
  }
}
