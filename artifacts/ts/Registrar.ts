/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as RegistrarContractJson } from "../Registrar.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RegistrarTypes {
  export type Fields = {
    registrarOwner: Address;
    ansRegistry: HexString;
  };

  export type State = ContractState<Fields>;

  export type NewNodeEvent = ContractEvent<{ node: HexString; owner: Address }>;
  export type TransferEvent = ContractEvent<{
    node: HexString;
    oldOwner: Address;
    newOwner: Address;
  }>;
  export type NewTTLEvent = ContractEvent<{
    node: HexString;
    owner: Address;
    ttl: bigint;
  }>;
  export type NewResolverEvent = ContractEvent<{
    node: HexString;
    owner: Address;
    resolverId: HexString;
  }>;
}

class Factory extends ContractFactory<
  RegistrarInstance,
  RegistrarTypes.Fields
> {
  consts = {
    RootNode:
      "b2453cbabd12c58b21d32b6c70e6c41c8ca2918d7f56c1b88e838edf168776bf",
    MinRentDuration: BigInt(2592000000),
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
    },
  };

  at(address: string): RegistrarInstance {
    return new RegistrarInstance(address);
  }

  tests = {
    rentPrice: async (
      params: TestContractParams<RegistrarTypes.Fields, { duration: bigint }>
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "rentPrice", params);
    },
    register: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        {
          name: HexString;
          owner: Address;
          duration: bigint;
          payer: Address;
          resolver: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "register", params);
    },
    unregister: async (
      params: TestContractParams<RegistrarTypes.Fields, { node: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "unregister", params);
    },
    removeRecord: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        { node: HexString; record: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeRecord", params);
    },
    renew: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        { node: HexString; duration: bigint; payer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "renew", params);
    },
    setOwner: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        { node: HexString; newOwner: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    setResolver: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        { node: HexString; resolver: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setResolver", params);
    },
    withdraw: async (
      params: TestContractParams<
        RegistrarTypes.Fields,
        { to: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Registrar = new Factory(
  Contract.fromJson(
    RegistrarContractJson,
    "",
    "0e3c3f638cce21479f3c26f00d8695de21b581dae0fe7497deb4cef76ce6fc1b"
  )
);

// Use this class to interact with the blockchain
export class RegistrarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RegistrarTypes.State> {
    return fetchContractState(Registrar, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewNodeEvent(
    options: SubscribeOptions<RegistrarTypes.NewNodeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Registrar.contract,
      this,
      options,
      "NewNode",
      fromCount
    );
  }

  subscribeTransferEvent(
    options: SubscribeOptions<RegistrarTypes.TransferEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Registrar.contract,
      this,
      options,
      "Transfer",
      fromCount
    );
  }

  subscribeNewTTLEvent(
    options: SubscribeOptions<RegistrarTypes.NewTTLEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Registrar.contract,
      this,
      options,
      "NewTTL",
      fromCount
    );
  }

  subscribeNewResolverEvent(
    options: SubscribeOptions<RegistrarTypes.NewResolverEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Registrar.contract,
      this,
      options,
      "NewResolver",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | RegistrarTypes.NewNodeEvent
      | RegistrarTypes.TransferEvent
      | RegistrarTypes.NewTTLEvent
      | RegistrarTypes.NewResolverEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      Registrar.contract,
      this,
      options,
      fromCount
    );
  }
}
