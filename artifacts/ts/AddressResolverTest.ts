/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AddressResolverTestContractJson } from "../tests/address_resolver_test.ral.json";

// Custom types for the contract
export namespace AddressResolverTestTypes {
  export type Fields = {
    ansRegistryId: HexString;
    addressInfoTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAlphAddress: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<Address>;
    };
    getEthAddress: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
    getAddress: {
      params: CallContractParams<{ node: HexString; chainId: bigint }>;
      result: CallContractResult<HexString>;
    };
    getOwner: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  AddressResolverTestInstance,
  AddressResolverTestTypes.Fields
> {
  at(address: string): AddressResolverTestInstance {
    return new AddressResolverTestInstance(address);
  }

  tests = {
    createAddressInfo: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; payload: HexString; payer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createAddressInfo", params);
    },
    setAlphAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; address: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAlphAddress", params);
    },
    setEthAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setEthAddress", params);
    },
    setAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; chainId: bigint; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAddress", params);
    },
    getAlphAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getAlphAddress", params);
    },
    getEthAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getEthAddress", params);
    },
    getAddress: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; chainId: bigint }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getAddress", params);
    },
    removeAddressInfo: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeAddressInfo", params);
    },
    getOwner: async (
      params: TestContractParams<
        AddressResolverTestTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
  };
}

// Use this object to test and deploy the contract
export const AddressResolverTest = new Factory(
  Contract.fromJson(
    AddressResolverTestContractJson,
    "",
    "392a0643534a2299ace92f1ebbe1205a14095e2778171f9185868faa5d74de67"
  )
);

// Use this class to interact with the blockchain
export class AddressResolverTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AddressResolverTestTypes.State> {
    return fetchContractState(AddressResolverTest, this);
  }

  methods = {
    getAlphAddress: async (
      params: AddressResolverTestTypes.CallMethodParams<"getAlphAddress">
    ): Promise<AddressResolverTestTypes.CallMethodResult<"getAlphAddress">> => {
      return callMethod(AddressResolverTest, this, "getAlphAddress", params);
    },
    getEthAddress: async (
      params: AddressResolverTestTypes.CallMethodParams<"getEthAddress">
    ): Promise<AddressResolverTestTypes.CallMethodResult<"getEthAddress">> => {
      return callMethod(AddressResolverTest, this, "getEthAddress", params);
    },
    getAddress: async (
      params: AddressResolverTestTypes.CallMethodParams<"getAddress">
    ): Promise<AddressResolverTestTypes.CallMethodResult<"getAddress">> => {
      return callMethod(AddressResolverTest, this, "getAddress", params);
    },
    getOwner: async (
      params: AddressResolverTestTypes.CallMethodParams<"getOwner">
    ): Promise<AddressResolverTestTypes.CallMethodResult<"getOwner">> => {
      return callMethod(AddressResolverTest, this, "getOwner", params);
    },
  };

  async multicall<Calls extends AddressResolverTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AddressResolverTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      AddressResolverTest,
      this,
      calls
    )) as AddressResolverTestTypes.MultiCallResults<Calls>;
  }
}
