/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as SecondaryRegistrarContractJson } from "../registrars/SecondaryRegistrar.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SecondaryRegistrarTypes {
  export type Fields = {
    primaryRegistrar: HexString;
    recordTemplateId: HexString;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  SecondaryRegistrarInstance,
  SecondaryRegistrarTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SecondaryRegistrarTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
      NameHasExpired: BigInt(5),
      InvalidCredentialToken: BigInt(6),
    },
  };

  at(address: string): SecondaryRegistrarInstance {
    return new SecondaryRegistrarInstance(address);
  }

  tests = {
    register: async (
      params: TestContractParams<
        SecondaryRegistrarTypes.Fields,
        {
          name: HexString;
          owner: Address;
          payer: Address;
          credentialTokenId: HexString;
          ttl: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "register", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SecondaryRegistrar = new Factory(
  Contract.fromJson(
    SecondaryRegistrarContractJson,
    "",
    "d3f8cf640dd37f61478fd72992fa9af50bb9247fb4fe010284a6903f500f1df1"
  )
);

// Use this class to interact with the blockchain
export class SecondaryRegistrarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SecondaryRegistrarTypes.State> {
    return fetchContractState(SecondaryRegistrar, this);
  }
}
