/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DefaultResolverContractJson } from "../default_resolver.ral.json";

// Custom types for the contract
export namespace DefaultResolverTypes {
  export type Fields = {
    ansRegistryId: HexString;
    addressInfoTemplateId: HexString;
    nameInfoTemplateId: HexString;
    pubkeyInfoTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAlphAddress: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<Address>;
    };
    getEthAddress: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
    getAddress: {
      params: CallContractParams<{ node: HexString; chainId: bigint }>;
      result: CallContractResult<HexString>;
    };
    getOwner: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<Address>;
    };
    getName: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
    getPubkey: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  DefaultResolverInstance,
  DefaultResolverTypes.Fields
> {
  at(address: string): DefaultResolverInstance {
    return new DefaultResolverInstance(address);
  }

  tests = {
    createAddressInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; payload: HexString; payer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createAddressInfo", params);
    },
    setAlphAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; address: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAlphAddress", params);
    },
    setEthAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setEthAddress", params);
    },
    setAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; chainId: bigint; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAddress", params);
    },
    getAlphAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getAlphAddress", params);
    },
    getEthAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getEthAddress", params);
    },
    getAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; chainId: bigint }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getAddress", params);
    },
    removeAddressInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeAddressInfo", params);
    },
    getOwner: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    createNameInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; name: HexString; payer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createNameInfo", params);
    },
    setName: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; name: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setName", params);
    },
    getName: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    removeNameInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeNameInfo", params);
    },
    createPubkeyInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; pubkey: HexString; payer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createPubkeyInfo", params);
    },
    setPubkey: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; pubkey: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setPubkey", params);
    },
    getPubkey: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPubkey", params);
    },
    removePubkeyInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removePubkeyInfo", params);
    },
    removeNode: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeNode", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DefaultResolver = new Factory(
  Contract.fromJson(
    DefaultResolverContractJson,
    "",
    "1fc581f714330ec88bde82bc0f72e4fc9dec48a00b6b6495f4c040414ee54586"
  )
);

// Use this class to interact with the blockchain
export class DefaultResolverInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DefaultResolverTypes.State> {
    return fetchContractState(DefaultResolver, this);
  }

  methods = {
    getAlphAddress: async (
      params: DefaultResolverTypes.CallMethodParams<"getAlphAddress">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getAlphAddress">> => {
      return callMethod(DefaultResolver, this, "getAlphAddress", params);
    },
    getEthAddress: async (
      params: DefaultResolverTypes.CallMethodParams<"getEthAddress">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getEthAddress">> => {
      return callMethod(DefaultResolver, this, "getEthAddress", params);
    },
    getAddress: async (
      params: DefaultResolverTypes.CallMethodParams<"getAddress">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getAddress">> => {
      return callMethod(DefaultResolver, this, "getAddress", params);
    },
    getOwner: async (
      params: DefaultResolverTypes.CallMethodParams<"getOwner">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getOwner">> => {
      return callMethod(DefaultResolver, this, "getOwner", params);
    },
    getName: async (
      params: DefaultResolverTypes.CallMethodParams<"getName">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getName">> => {
      return callMethod(DefaultResolver, this, "getName", params);
    },
    getPubkey: async (
      params: DefaultResolverTypes.CallMethodParams<"getPubkey">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getPubkey">> => {
      return callMethod(DefaultResolver, this, "getPubkey", params);
    },
  };

  async multicall<Calls extends DefaultResolverTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DefaultResolverTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DefaultResolver,
      this,
      calls
    )) as DefaultResolverTypes.MultiCallResults<Calls>;
  }
}
