/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DefaultResolverContractJson } from "../DefaultResolver.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DefaultResolverTypes {
  export type Fields = {
    ansRegistry: HexString;
    registrar: HexString;
    recordInfoTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export type NewRecordInfoCreatedEvent = ContractEvent<{
    node: HexString;
    pubkey: HexString;
    addresses: HexString;
  }>;
  export type AddressUpdatedEvent = ContractEvent<{
    node: HexString;
    chainId: bigint;
    newAddress: HexString;
  }>;
  export type PubkeyUpdatedEvent = ContractEvent<{
    node: HexString;
    newPubkey: HexString;
  }>;
  export type RecordInfoRemovedEvent = ContractEvent<{ node: HexString }>;

  export interface CallMethodTable {
    getAddress: {
      params: CallContractParams<{ node: HexString; chainId: bigint }>;
      result: CallContractResult<HexString>;
    };
    getPubKey: {
      params: CallContractParams<{ node: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  DefaultResolverInstance,
  DefaultResolverTypes.Fields
> {
  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt(0),
      InvalidArgs: BigInt(1),
      ExpectAssetAddress: BigInt(2),
      NameHasBeenRegistered: BigInt(3),
      ContractNotExists: BigInt(4),
    },
  };

  at(address: string): DefaultResolverInstance {
    return new DefaultResolverInstance(address);
  }

  tests = {
    removeNode: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "removeNode", params);
    },
    newRecordInfo: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        {
          node: HexString;
          payer: Address;
          pubkey: HexString;
          addresses: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newRecordInfo", params);
    },
    setAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; chainId: bigint; address: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAddress", params);
    },
    getAddress: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; chainId: bigint }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getAddress", params);
    },
    setPubkey: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString; pubkey: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setPubkey", params);
    },
    getPubKey: async (
      params: TestContractParams<
        DefaultResolverTypes.Fields,
        { node: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getPubKey", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DefaultResolver = new Factory(
  Contract.fromJson(
    DefaultResolverContractJson,
    "",
    "534e86b9ad3db38f6d7726f66d0047beb56e805de79eb0662694ddd10657e8a6"
  )
);

// Use this class to interact with the blockchain
export class DefaultResolverInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DefaultResolverTypes.State> {
    return fetchContractState(DefaultResolver, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewRecordInfoCreatedEvent(
    options: SubscribeOptions<DefaultResolverTypes.NewRecordInfoCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DefaultResolver.contract,
      this,
      options,
      "NewRecordInfoCreated",
      fromCount
    );
  }

  subscribeAddressUpdatedEvent(
    options: SubscribeOptions<DefaultResolverTypes.AddressUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DefaultResolver.contract,
      this,
      options,
      "AddressUpdated",
      fromCount
    );
  }

  subscribePubkeyUpdatedEvent(
    options: SubscribeOptions<DefaultResolverTypes.PubkeyUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DefaultResolver.contract,
      this,
      options,
      "PubkeyUpdated",
      fromCount
    );
  }

  subscribeRecordInfoRemovedEvent(
    options: SubscribeOptions<DefaultResolverTypes.RecordInfoRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DefaultResolver.contract,
      this,
      options,
      "RecordInfoRemoved",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | DefaultResolverTypes.NewRecordInfoCreatedEvent
      | DefaultResolverTypes.AddressUpdatedEvent
      | DefaultResolverTypes.PubkeyUpdatedEvent
      | DefaultResolverTypes.RecordInfoRemovedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      DefaultResolver.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getAddress: async (
      params: DefaultResolverTypes.CallMethodParams<"getAddress">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getAddress">> => {
      return callMethod(
        DefaultResolver,
        this,
        "getAddress",
        params,
        getContractByCodeHash
      );
    },
    getPubKey: async (
      params: DefaultResolverTypes.CallMethodParams<"getPubKey">
    ): Promise<DefaultResolverTypes.CallMethodResult<"getPubKey">> => {
      return callMethod(
        DefaultResolver,
        this,
        "getPubKey",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DefaultResolverTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DefaultResolverTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DefaultResolver,
      this,
      calls,
      getContractByCodeHash
    )) as DefaultResolverTypes.MultiCallResults<Calls>;
  }
}
